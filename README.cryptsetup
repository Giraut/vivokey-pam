                        Using Vivokey PAM with cryptsetup
                        ---------------------------------



While unrelated to PAM authentication, vivokey_pam.py also offers a "gethash"
command to ask the Vivokey token to calculate a hash from a user-supplied
challenge and print out the hash without performing any authentication,
using the user's registered account and password.

The gethash command is quite specifically designed to take a disk UUID as a
challenge and return the hash in a format understandable by cryptsetup, for the
purpose of unlocking encrypted volumes with an OTP account stored on a Vivokey
token. But it may be used for other purposes that required token-calculated
SHA hashes.

The challenge must be supplied to the tool's stdin as an ASCII-encoded 8- to 64-
byte hex number that may optionally be separated by spaces or hyphens.

The SHA hash calculated by the token from this challenge is printed out on
stdout without a trailing linefeed as an ASCII-encoded 20-, 32- or 64-byte hex
number. In case of error, an error message is printed on stderr and a non-zero
error code code is returned.

Example:

root@alfa:~# echo 1122334455667788 | vivokey_pam.py gethash
0711C2E805993D9E138C4A8B09BD5967A00DAC0Droot@alfa:~#

All the other command line arguments (-r, -c, -w, -u) also apply.

With the gethash command, accounts registered in /etc/users.vivokey must not
have an OATH secret. For example, in the configuration file below, the alice
and bob accounts are set up for PAM authentication, while the encdisk account
is set up strictly for the purpose of yielding hashes with the token:

# Username      OATH account    OATH password   OATH secret
alice           alice@alfa      1234            5ae022b0fb847f175d17
bob             bob@alfa        -               16d20808b65ba0ad9076
encdisk         encdisk@alfa    5678            -

The gethash command will refuse to run if the secret is recorded in the file
for the account.

If you use vivokey_setup_account.py to set up an account to get hashes,
select N when asked whether to save the secret. If you want to convert an
account setup to do PAM authentication into one for hashes, edit out the
password by hand.



Usage example #1: setting up and using a LUKS encrypted disk image
------------------------------------------------------------------

   In the following example, the disk image file is ./disk.img

   As root:

   1/ Create / format a 32M disk image as a LUKS volume with the key "X":

     dd if=/dev/urandom of=./disk.img bs=1M count=32
     echo -n X | cryptsetup luksFormat ./disk.img -d-

   2/ Replace the "X" key with the hash generated by the "encdisk" account from
      the LUKS volume's UUID:

     (echo -n X; cryptsetup luksUUID ./disk.img | vivokey_pam.py gethash -u encdisk) | cryptsetup luksChangeKey ./disk.img -d- --keyfile-offset 0 --keyfile-size 1 --new-keyfile-offset 0

   3/ Open / map the LUKS volume in /dev/mapper using the Vivokey hash generated
      by the "encdisk" account from the LUKS volume's UUID:

      cryptsetup luksUUID ./disk.img | vivokey_pam.py gethash -u encdisk | cryptsetup luksOpen ./disk.img mpr -d-

   4/ Create the filesystem onto the LUKS volume:

      mkfs.ext4 /dev/mapper/mpr 

   5/ Mount and use the filesystem

      mount /dev/mapper/mpr /mnt
      df -h /mnt
      ls -l /mnt
      ...

   6/ Unmount the filesystem

      umount /mnt

   7/ Close / unmap the LUKS volume from /dev/mapper

      cryptsetup close mpr



Usage example #2: setting up and using a plain dm-crypt-encrypted partition
---------------------------------------------------------------------------

   In the following example, the disk partition is /dev/sde5
   PLEASE NOTE THAT ALL THE DATA ON THE PARTITION IS LOST!

   As root:

   1/ Scramble the partition (this can take quite a lot of time):

      dd if=/dev/urandom of=/dev/sde5 bs=1G

   2/ Open / map the encrypted partition in /dev/mapper using the Vivokey hash
      generated by the "encdisk" account from the partition's UUID:

      blkid -s PARTUUID -o value /dev/sde5 | vivokey_pam.py gethash -u encdisk | cryptsetup plainOpen /dev/sda1 mpr

   3/ Mount and use the filesystem

      mount /dev/mapper/mpr /mnt
      df -h /mnt
      ls -l /mnt
      ...

   4/ Unmount the filesystem

      umount /mnt

   5/ Close / unmap the LUKS volume from /dev/mapper

      cryptsetup close mpr
